#include <iostream>
#include <SDL.h>

// Constants
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
const int TILE_SIZE = 32;
const int NUM_TILES_X = SCREEN_WIDTH / TILE_SIZE;
const int NUM_TILES_Y = SCREEN_HEIGHT / TILE_SIZE;

// Forward declarations
class Board;
class PacMan;
class Ghost;

// Board class
class Board {
public:
    Board(SDL_Renderer* renderer) : renderer(renderer) {
        // Load textures
        wallTexture = loadTexture("wall.bmp");
        dotTexture = loadTexture("dot.bmp");
        powerPelletTexture = loadTexture("power_pellet.bmp");
    }

    ~Board() {
        // Free textures
        SDL_DestroyTexture(wallTexture);
        SDL_DestroyTexture(dotTexture);
        SDL_DestroyTexture(powerPelletTexture);
    }

    void update() {
        // TODO: Update board state
    }

    void render() {
        // Clear screen
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        // Render tiles
        for (int y = 0; y < NUM_TILES_Y; y++) {
            for (int x = 0; x < NUM_TILES_X; x++) {
                switch (tiles[y][x]) {
                    case TileType::Wall:
                        renderTexture(wallTexture, x * TILE_SIZE, y * TILE_SIZE);
                        break;
                    case TileType::Dot:
                        renderTexture(dotTexture, x * TILE_SIZE, y * TILE_SIZE);
                        break;
                    case TileType::PowerPellet:
                        renderTexture(powerPelletTexture, x * TILE_SIZE, y * TILE_SIZE);
                        break;
                }
            }
        }

        // Present renderer
        SDL_RenderPresent(renderer);
    }

private:
    enum class TileType {
        Wall,
        Dot,
        PowerPellet
    };

    SDL_Renderer* renderer;
    SDL_Texture* wallTexture;
    SDL_Texture* dotTexture;
    SDL_Texture* powerPelletTexture;
    TileType tiles[NUM_TILES_Y][NUM_TILES_X] = {
            { TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall },
            { TileType::Wall, TileType::Dot, TileType::Dot, TileType::Dot, TileType::Dot, TileType::Dot, TileType::Dot, TileType::Wall },
            { TileType::Wall, TileType::Dot, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Dot, TileType::Wall },
            { TileType::Wall, TileType::Dot, TileType::Wall, TileType::Dot, TileType::Dot, TileType::Wall, TileType::Dot, TileType::Wall },
            { TileType::Wall, TileType::Dot, TileType::Wall, TileType::Dot, TileType::Dot, TileType::Wall, TileType::Dot, TileType::Wall },
            { TileType::Wall, TileType::Dot, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Dot, TileType::Wall },
            { TileType::Wall, TileType::Dot, TileType::Dot, TileType::Dot, TileType::Dot, TileType::Dot, TileType::Dot, TileType::Wall },
            { TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall, TileType::Wall }
    };

    SDL_Texture* loadTexture(const char* filename) {
        SDL_Surface* surface = SDL_LoadBMP(filename);
        SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
        SDL_FreeSurface(surface);
        return texture;
    }

    void renderTexture(SDL_Texture* texture, int x, int y) {
        SDL_Rect dstRect = { x, y, TILE_SIZE, TILE_SIZE };
        SDL_RenderCopy(renderer, texture, NULL, &dstRect);
    }
};

// PacMan class
class PacMan {
public:
    PacMan(Board* board) : board(board) {
        // TODO: Initialize PacMan state
    }

    void update() {
        // TODO: Update PacMan state
    }

    void render() {
        // TODO: Render PacMan
    }
    private:
            Board* board;
};

// Ghost class
class Ghost {
public:
    Ghost(Board* board) : board(board) {
        // TODO: Initialize Ghost state
    }

    void update() {
        // TODO: Update Ghost state
    }

    void render() {
        // TODO: Render Ghost
    }

private:
    Board* board;
};

// Main function
int main(int argc, char* argv[]) {
    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        std::cerr << "SDL_Init failed: " << SDL_GetError() << std::endl;
        return 1;
    }

    // Create window and renderer
    SDL_Window* window = SDL_CreateWindow("PacMan", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (window == nullptr) {
        std::cerr << "SDL_CreateWindow failed: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {
        std::cerr << "SDL_CreateRenderer failed: " << SDL_GetError() << std::endl;
        SDL_DestroyWindow(window);
        SDL_Quit();
        return 1;
    }

    // Create board, PacMan, and ghosts
    Board board(renderer);
    PacMan pacMan(&board);
    Ghost ghosts[4] = { Ghost(&board), Ghost(&board), Ghost(&board), Ghost(&board) };

    // Game loop
    bool quit = false;
    while (!quit) {
        // Handle events
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                quit = true;
            }
        }

        // Update game state
        board.update();
        pacMan.update();
        for (int i = 0; i < 4; i++) {
            ghosts[i].update();
        }

        // Render game
        board.render
